// new module script

enum ListItemEnum {
  eToothpaste, 
  eFlour, 
  eYeast, 
  eMusicDisc, 
  eChampagne, 
  eInstantPudding,
  eOil, 
  
  eLastListITem
};


struct ListItemsParamType
{  
  String name;
  String description;
  float price;
  bool selected;
  CluesEnum relatedClue;
};

/**
 * Should change this when reimporting sprite into a new ID.
 */
readonly int RECIPT_SPRITE = 19;

/**
 * Margin of the whole recipt from top of room.
 */
readonly int TOP_MARGIN = 15; //20;

/**
 * Margin of the whole recipt from right of room.
 */
readonly int RIGHT_MARGIN = 15; //20;

/**
 * Where the first list iten will start on the Y axis
 * Relative to the reciept.
 */
readonly int LIST_START_Y = 85;

/**
 * The vertical location names of the list.
 * Relative to the reciept.
 */
readonly int LIST_ITEMS_X = 10;

/**
 * The vertical location the prices of the list.
 * Relative to the reciept.
 */
readonly int LIST_PRICES_X = 100;

/**
 * Height of a single list item including margins
 */
readonly int LIST_ITEM_HEIGHT = 15; 

/**
 * When you draw a string at x=0 using the turncoat font,
 * it will actually have a vertical offset. I measured it empirtically.
 */
readonly int FONT_TOP_MARGIN = 8;

#define COLOR_ITEM_NORMAL Game.GetColorFromRGB(0, 0, 0)
#define COLOR_ITEM_HOVER Game.GetColorFromRGB(255, 255, 0)
#define COLOR_ITEM_SELECTED Game.GetColorFromRGB(150, 150, 150)

Overlay *globRecieptOverlay;
DynamicSprite *globRecieptSprite;

ListItemsParamType globItemPartamters[eLastListITem];
int globHoveredItem;

/**
 * Display or not display the reciept
 */
bool globEnabled;

function game_start() 
{
  globItemPartamters[eFlour].name = "Flour";
  globItemPartamters[eFlour].description = "Flour? Who is he baking for? I've never known him to be much of a cook.";
  globItemPartamters[eFlour].price = 1.00;
  globItemPartamters[eFlour].relatedClue = eClueCake;
  
  globItemPartamters[eYeast].name = "Yeast";
  globItemPartamters[eYeast].description = "I didn't even realize he knows what yeast is.";
  globItemPartamters[eYeast].price = 2.00;
  globItemPartamters[eYeast].relatedClue = eClueCake;
  
  globItemPartamters[eInstantPudding].name = "Cream";
  globItemPartamters[eInstantPudding].description = "I bet that bastard bought the cream so he could lick it off whatever slutty bitch he has in there.";
  globItemPartamters[eInstantPudding].price = 3.99;
  globItemPartamters[eInstantPudding].relatedClue = eClueCake;
  
  globItemPartamters[eChampagne].name = "Champagne";
  globItemPartamters[eChampagne].description = "Champagne? He's blatantly celebrating his sneaking around on me!";
  globItemPartamters[eChampagne].price = 12.00;
  globItemPartamters[eChampagne].relatedClue = eClueChampagne;
  
  globItemPartamters[eMusicDisc].name = "\"My Way\" CD";
  globItemPartamters[eMusicDisc].description = "Oh hell no. There's only one reason to buy that Usher album.";
  globItemPartamters[eMusicDisc].price = 9.99;
  globItemPartamters[eMusicDisc].relatedClue = eClueMusic;
  
  globItemPartamters[eToothpaste].name = "Toothpaste";
  globItemPartamters[eToothpaste].description = "Toothpaste seems like an innocuous purchase, but I'm still suspicious.";
  globItemPartamters[eToothpaste].price = 5.00;
  globItemPartamters[eToothpaste].relatedClue = 0;
  
  globItemPartamters[eOil].name = "Massage Oil";
  globItemPartamters[eOil].description = "This is damning evidence. There's no reason he'd buy massage oil unless he's cheating on me";
  globItemPartamters[eOil].price = 7.50;
  globItemPartamters[eOil].relatedClue = 0; // Massage oil clue is discovered simply by looking at the list. It is too incriminating!
  
  globRecieptSprite = DynamicSprite.Create(Game.SpriteWidth[RECIPT_SPRITE], Game.SpriteHeight[RECIPT_SPRITE]);
  globHoveredItem = 0;
  globEnabled = false;
}


function CalcRecieptLeft()
{
  return Room.Width - Game.SpriteWidth[RECIPT_SPRITE] - RIGHT_MARGIN;
}

function CalcRecieptRight()
{
  return CalcRecieptLeft() + Game.SpriteWidth[RECIPT_SPRITE];
}

function CalcRecieptTop()
{
  return TOP_MARGIN;
}

function CalcRecieptBottom()
{
  return CalcRecieptTop() + Game.SpriteHeight[RECIPT_SPRITE];
}


function ReDraw() {

  DrawingSurface *surface = globRecieptSprite.GetDrawingSurface();
  
  // Note: can resize the sprite here using width and height parameters.
  surface.DrawImage(0, 0,  RECIPT_SPRITE, true); 

  for (int i = 1; i < eLastListITem; i++) {
    
    if (globHoveredItem == i) {
      surface.DrawingColor = COLOR_ITEM_HOVER;
    } else if (globItemPartamters[i].selected) {
      surface.DrawingColor = COLOR_ITEM_SELECTED;
    } else {
      surface.DrawingColor = COLOR_ITEM_NORMAL;
    }
    
    surface.DrawString(
      LIST_ITEMS_X,
      LIST_START_Y + i * LIST_ITEM_HEIGHT, 
      eFontfntReciept, 
      globItemPartamters[i].name);
      
    surface.DrawString(
      LIST_PRICES_X,
      LIST_START_Y + i * LIST_ITEM_HEIGHT, 
      eFontfntReciept, 
      String.Format("$%.2f", globItemPartamters[i].price));
  }
  
  surface.Release();
  
  // Removes old drawing before re-drawing
  if (globRecieptOverlay != null && globRecieptOverlay.Valid) {
    globRecieptOverlay.Remove();
  }
  
  // Creates the actual overlay (will display it on screen)
  globRecieptOverlay = Overlay.CreateGraphical(
    CalcRecieptLeft(),
    CalcRecieptTop(), 
    globRecieptSprite.Graphic,
    true);     
  
}

function DetermineHover()
{
  globHoveredItem = 0;
  
  if (mouse.x < CalcRecieptLeft() || mouse.x > CalcRecieptRight() )
  {
    return;
  }
    
  for (int i = 1; i < eLastListITem; i++) {
    int relative_y = mouse.y - TOP_MARGIN - FONT_TOP_MARGIN;
    if (relative_y >= LIST_START_Y + i * LIST_ITEM_HEIGHT && relative_y < LIST_START_Y + (i + 1) * LIST_ITEM_HEIGHT) {
      globHoveredItem = i;
    }
  }
}

function on_mouse_click(MouseButton button) {
  if (globEnabled && globHoveredItem != 0) 
  {
    // Mouse right and left is not accurate. Better use look at and interact. No time to fix properly.
    if (button == eMouseLeft) {
      globItemPartamters[globHoveredItem].selected = ! globItemPartamters[globHoveredItem].selected;
    } else if (button == eMouseRight) {
      
      if (globHoveredItem != eOil) {
        player.Say(globItemPartamters[globHoveredItem].description);
      } else {
        if (Clues.IsAlreadyFound(eClueMassageOil)) {
          player.Say("I already know that massage oil is incriminating.");
        } else {
          player.Say(globItemPartamters[globHoveredItem].description);
          Clues.Found(eClueMassageOil);
        }
      }
    }
  }
}

function repeatedly_execute_always() 
{
  /**
   * Remove reciept for the duration of the speech
   */
  if (player.Speaking && globRecieptOverlay != null && globRecieptOverlay.Valid) {
		globRecieptOverlay.Remove();
	}
}


function repeatedly_execute() 
{

  if (globEnabled)
	{
    DetermineHover();
    ReDraw(); // If game becomes slow, need to call redraw only when something changes.
	} else if (globRecieptOverlay != null && globRecieptOverlay.Valid) {
		globRecieptOverlay.Remove();
	}
}

static function Reciept::Enable() 
{
  globEnabled = true;
}

static function Reciept::Disable() 
{
  globEnabled = false;
}

static bool Reciept::IsEnabled() 
{
  return globEnabled;
}

static bool Reciept::HasSelection()
{
   for (int i = 1; i < eLastListITem; i++) {
     if(globItemPartamters[i].selected) return true;
   }
   
   return false;
}

 static bool Reciept::ItemsSelectedForClue(CluesEnum clueId)
 {
   
   // Every item related to this clue should be selected
   // Every item not related to this clue should not be selected
   // At least one item is selected
   
    for (int i = 1; i < eLastListITem; i++) {
      if(globItemPartamters[i].selected && globItemPartamters[i].relatedClue != clueId) {
        return false;
      }
     
      if (globItemPartamters[i].selected == false &&  globItemPartamters[i].relatedClue == clueId) {
        return false;
      }    
   }
   
   return Reciept.HasSelection();
 }
 
 static bool Reciept::PartialItemsSelectedForClue(CluesEnum clueId)
 {
   
   // Every item related to this clue should be selected
   // Every item not related to this clue should not be selected
   // At least one item is selected
   
    for (int i = 1; i < eLastListITem; i++) {
     if(globItemPartamters[i].selected &&  globItemPartamters[i].relatedClue != clueId) {
       return false;
     } 
   }
   
   return Reciept.HasSelection();
 }
